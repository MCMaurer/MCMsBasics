ggthemes::theme_tufte
.libPaths()
devtools::document()
install.packages(devtools)
install.packages("devtools")
devtools::document()
install.packages("ggplot2", "dplyr")
install.packages(c("ggplot2", "dplyr"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
packrat::set_opts(auto.snapshot = TRUE)
packrat::snapshot()
install.packages("plogr")
packrat::snapshot()
install.packages("BH")
packrat::snapshot()
packrat::status()
devtools::document()
devtools::document()
devtools::use_vignette("my-vignette")
devtools::load_all()
MCMsBasics::minimal_ggplot_theme(base_family = base_family)
MCMsBasics::minimal_ggplot_theme()
devtools::use_testthat()
devtools::document()
install.packages("testthat")
install.packages("devtools")
install.packages("ggplot2")
install.packages("dplyr")
library(MCMsBasics)
?scales::trans_new
library(MCMsBasics)
library(MCMsBasics)
devtools::document()
install.packages("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
scale_y_quantile()
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
library(dplyr)
library(ggplot2)
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(!!mpg)
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mtcars$mpg)
scale_y_continuous(..., trans = quantile_trans(val, prob, digits))
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mtcars$mpg)
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val = .$!!x, prob, digits))
}
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val = .$!!x, prob, digits))
}
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
x <- enquo(x)
scale_y_continuous(..., trans = quantile_trans(val = .$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
x <- enquo(val)
scale_y_continuous(..., trans = quantile_trans(val = .$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
scale_y_continuous(..., trans = quantile_trans(val = data$x, prob, digits))
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
x <- enquo(val)
scale_y_continuous(..., trans = quantile_trans(val = data$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
x <- enquo(val)
data <- data
scale_y_continuous(..., trans = quantile_trans(val = data$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mpg)
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mtcars$mpg)
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(mtcars$mpg)
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
x <- !!aesthetics
scale_y_continuous(..., trans = quantile_trans(val = .$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(aesthetics = "y")
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, aesthetics, ...) {
x <- !!aesthetics
scale_y_continuous(..., trans = quantile_trans(val = .$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(aesthetics = "y")
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, aesthetics, ...) {
x <- enquo(aesthetics)
scale_y_continuous(..., trans = quantile_trans(val = .$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(aesthetics = "y")
scale_y_continuous(..., trans = quantile_trans(val = mtcars$x, prob, digits))
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, aesthetics, ...) {
x <- enquo(aesthetics)
scale_y_continuous(..., trans = quantile_trans(val = mtcars$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(aesthetics = "y")
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, aesthetics, ...) {
scale_y_continuous(..., trans = quantile_trans(val = mtcars$!!aesthetics, prob, digits))
}
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, aesthetics, ...) {
x <- !!aesthetics
scale_y_continuous(..., trans = quantile_trans(val = mtcars$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(aesthetics = "y")
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, aesthetics, ...) {
x <- expr(aesthetics)
scale_y_continuous(..., trans = quantile_trans(val = mtcars$x, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(aesthetics = "y")
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val, prob, digits))
}
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val = mtcars$val, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(val = mpg)
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(val = "mpg")
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(val = "mpg")
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(val = "mpg")
#' Set the y axis scale to continuous with quantile breaks
#'
#' @param val: the column to calculate breaks from, ie mtcars$mpg
#' @param prob: a sequence of probability values, ie c(0, 0.5, 1) or seq(0, 1, 0.25)
#' @param digits: number of digits to round the quantiles to
#'
#' @return
#' @export
#' @import ggplot2
#'
scale_y_quantile <- function(val, prob = seq(0, 1, 0.25), digits = 1, ...) {
scale_y_continuous(..., trans = quantile_trans(val, prob, digits))
}
mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point() + scale_y_quantile(val = mtcars$mpg)
p <- mtcars %>% ggplot(aes(x = wt, y = mpg)) + geom_point()
p
p$mapping$x
